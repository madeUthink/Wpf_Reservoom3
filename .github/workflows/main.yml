name: "Deploy"

on:
  push:
    paths:
      - '**/*.yml'  # Only trigger on YAML changes
    tags:
      - 'class-commands/v*'  # Only trigger on version tags

env:
  PROJECT_PATH: Wpf_Reservoom3.csproj
  PUBLISH_PATH: Wpf_Reservoom_3/bin/Release/net8.0-windows/win-x64/publish

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: Wpf_Reservoom_3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }} -r win-x64
        working-directory: Wpf_Reservoom_3

      - name: Publish application
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true
        working-directory: Wpf_Reservoom_3

      - name: List published files
        run: dir ${{ env.PUBLISH_PATH }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Upload release assets
        uses: csexton/release-asset-action@v2
        with:
          github-token: ${{ secrets.GH_PAT }}
          pattern: ${{ env.PUBLISH_PATH }}/*.*
          release-url: ${{ steps.create_release.outputs.upload_url }}

      - name: Delete source code zip or tar.gz from release
        run: |
          # Install jq (JSON processor)
          choco install jq -y

          # Fetch release ID using GitHub API
          $release_id = curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" `
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref }}" | jq -r '.id'

          # Fetch the assets associated with the release
          $assets = curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" `
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets"

          # Find the source code zip or tar.gz file URL
          $source_code_zip_url = $assets | jq -r '.[] | select(.name | test("source|.tar.gz")) | .url'

          # Check if URL is not null and delete it if found
          if ($source_code_zip_url -ne "null") {
            curl -X DELETE -H "Authorization: token ${{ secrets.GH_PAT }}" $source_code_zip_url
          }